testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(ts(testData$MonthlyMean, start=c(2018, 6), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired")
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired")
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot(size=1) + autolayer(ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired")
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot(size=80) + autolayer(ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired")
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot(size=800) + autolayer(ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired")
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12), size=800)+
theme_classic() + scale_color_brewer(palette = "Paired")
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12), size=80)+
theme_classic() + scale_color_brewer(palette = "Paired")
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12), size=1)+
theme_classic() + scale_color_brewer(palette = "Paired")
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(size=8, ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12), size=1)+
theme_classic() + scale_color_brewer(palette = "Paired")
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(size=1, ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12), size=1)+
theme_classic() + scale_color_brewer(palette = "Paired")
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(size=1, ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired")
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(size=1, ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired") + geom_line(aes(trainData$MonthlyMean), size = 1)
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(size=1, ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired") + geom_line(aes(x = trainData$Date, y = trainData$MonthlyMean), size = 1)
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(size=1, ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired") + geom_line(aes(y = trainData$MonthlyMean), size = 1)
#save(df_testResults.simESM, file = "simpleesmforecast.rda")
testResults.dampESM %>%
forecast(h=6) %>%
autoplot() + autolayer(size=1, ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired")
testResults.simESM %>%
forecast(h=6) %>%
autoplot() + autolayer(size=1, ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired")
testResults.simESM %>%
forecast(h=6) %>%
autoplot() + autolayer(size=1, ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic(legend.position = "none") + scale_color_brewer(palette = "Paired")
testResults.simESM %>%
forecast(h=6) %>%
autoplot() + autolayer(size=1, ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + scale_color_brewer(palette = "Paired") + theme(legend.position = "none")
testResults.simESM %>%
forecast(h=6) %>%
autoplot() + autolayer(size=1, ts(testData$MonthlyMean, start=c(2018, 7), frequency = 12))+
theme_classic() + theme(legend.position = "none")
install.packages("MASS")
install.packages("unbalanced")
install.packages("multcomp")
install.packages("brglm")
install.packages("car")
install.packages("haven")
install.packages("anchors")
library(MASS)
library(unbalanced)
library(multcomp)
library(brglm)
library(car)
library("haven")
library("anchors")
setwd("C:\\Users\\Iqra Munawar\\Documents\\Python Scripts\\LogisticPhase2")
insurance_t <- read_sas("C:/Users/Iqra Munawar/Documents/Python Scripts/LogisticPhase2/insurance_t_bin.sas7bdat")
colSums(is.na(insurance_t))
insurance_t <- replace.value(insurance_t,"CC", from= NA, to = as.integer(2) )
insurance_t <- replace.value(insurance_t,"CCPURC", from= NA, to = as.integer(5) )
insurance_t <- replace.value(insurance_t,"INV", from= NA, to = as.integer(2) )
insurance_t <- replace.value(insurance_t,"HMOWN", from= NA, to = as.integer(2) )
finsurance_t <- as.data.frame(lapply(insurance_t, as.factor))
logit.model.w1 <- glm(INS~.,
data = finsurance_t, family = binomial(link = "logit")
)
summary(logit.model.w1)
insurance_t <- replace.value(insurance_t,"CC", from= NA, to = as.integer(2) )
insurance_t <- replace.value(insurance_t,"CCPURC", from= NA, to = as.integer(5) )
insurance_t <- replace.value(insurance_t,"INV", from= NA, to = as.integer(2) )
insurance_t <- replace.value(insurance_t,"HMOWN", from= NA, to = as.integer(2) )
colSums(is.na(insurance_t))
finsurance_t <- as.data.frame(lapply(insurance_t, as.factor))
logit.model.w1 <- glm(INS~.,
data = finsurance_t, family = binomial(link = "logit")
)
summary(logit.model.w1)
library(MASS)
library(unbalanced)
library(multcomp)
library(brglm)
library(car)
library("haven")
library("anchors")
setwd("C:\\Users\\Iqra Munawar\\Documents\\Python Scripts\\LogisticPhase2")
insurance_t <- read_sas("C:/Users/Iqra Munawar/Documents/Python Scripts/LogisticPhase2/insurance_t_bin.sas7bdat")
summary(insurance_t)
#finding the missing values
colSums(is.na(insurance_t))
insurance_t <- replace.value(insurance_t,"CC", from= NA, to = as.integer(2) )
insurance_t <- replace.value(insurance_t,"CCPURC", from= NA, to = as.integer(5) )
insurance_t <- replace.value(insurance_t,"INV", from= NA, to = as.integer(2) )
insurance_t <- replace.value(insurance_t,"HMOWN", from= NA, to = as.integer(2) )
# Categorical Variables #
finsurance_t <- as.data.frame(lapply(insurance_t, as.factor))
logit.model.w1 <- glm(INS~.,
data = finsurance_t, family = binomial(link = "logit")
)
summary(logit.model.w1)
colSums(is.na(insurance_t))
logit.model.w1 <- glm(INS~.,
data = finsurance_t, family = binomial(link = "logit")
)
summary(logit.model.w1)
insurance_t <- replace.value(insurance_t,"CASHBK", from= 2, to = as.integer(1) )
insurance_t <- replace.value(insurance_t,"MMCRED", from= 5, to = as.integer(3) )
finsurance_t <- as.data.frame(lapply(insurance_t, as.factor))
logit.model.w1 <- glm(INS~.,
data = finsurance_t, family = binomial(link = "logit")
)
summary(logit.model.w1)
install.packages("rJava")
install.packages("glmulti")
install.packages("givitiR")
library(rJava)
library(glmulti)
library(givitiR)
library("rJava")
library("glmulti")
library("givitiR")
install.packages("rJava")
install.packages("glmulti")
install.packages("givitiR")
install.packages("givitiR")
library(rJava)
library(glmulti)
library(givitiR)
library(rJava)
library(glmulti)
library(givitiR)
library("rJava")
install.packages("rJava")
library("rJava")
install.packages("glmulti")
library(glmulti)
library("glmulti")
install.packages("rJava")
library("rJava")
install.packages("glmulti")
library("glmulti")
install.packages("givitiR")
library("givitiR")
back.model <- step(logit.model.w1, direction = "backward")
summary(back.model)
summary(back.model)
back.model <- step(logit.model.w1, direction = "backward")
back.model <- step(logit.model.w1, direction = "backward")
back.model <- step(logit.model.w1, direction = "backward", k=log(8495))
summary(logit.model.w1)
back.model <- step(logit.model.w1, direction = "backward")
back.model <- step(logit.model.w1, direction = "backward", k=9.5491)
qchisq(0.002,1,lower.tail=FALSE)
back.model <- step(logit.model.w1, direction = "backward", k=9.549536)
#question1
set.seed(1)
#question2
pop_truth <- rexp(10000, rate = 2)
typeof(pop_truth)
#question3
mean_pop_truth <- round(mean(pop_truth), 2)
#question4
sample_pop <- sample(pop_truth, 5000)
mean_pop_truth <- round(mean(pop_truth), 2)
mean_pop_truth
sample_pop <- sample(pop_truth, 5000)
sample_pop
sample_stats <- round(c(mean(sample_pop), sd(sample_pop)), 2)
sample_stats
?data.frame
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
}
View(df_results)
#question1
set.seed(1)
#question2
pop_truth <- rexp(10000, rate = 2)
typeof(pop_truth)
#question3
mean_pop_truth <- round(mean(pop_truth), 2)
#question4
sample_pop <- sample(pop_truth, 5000)
sample_stats <- round(c(mean(sample_pop), sd(sample_pop)), 2)
typeof(sample_stats)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
}
df44<-data.frame("hi","bye")
View(df44)
f3 <- function(n){
df3 <- data.frame(x = numeric(n), y = character(n), stringsAsFactors = FALSE)
for(i in 1:n){
df3$x[i] <- i
df3$y[i] <- toString(i)
}
df3
}
View(df3)
f3 <- function(n){
df3 <- data.frame(x = numeric(n), y = character(n), stringsAsFactors = FALSE)
for(i in 1:n){
df3$x[i] <- i
df3$y[i] <- toString(i)
}
df3
}
View(df3)
View("df3")
result.frame = as.data.frame(matrix(ncol=2, nrow=20))
result.frame = as.data.frame(matrix(ncol=2, nrow=20))
names(result.frame) = c("ID", "Value")
View(result.frame)
sample_stats
sample_stats <-(data) {
mean <- mean(data)
stdev <- sd(data)
l2 <- list(mean=mean, std=std)
return(l2)
}
sample_stats <-function(data) {
mean <- mean(data)
stdev <- sd(data)
l2 <- list(mean=mean, std=std)
return(l2)
}
sample_stats(sample_pop)
sample_stats <-function(data) {
mean <- mean(data)
stdev <- sd(data)
l2 <- list(mean=mean, stdev=stdev)
return(l2)
}
sample_stats(sample_pop)
sample_stats(round(sample_pop,2))
sample_stats(sample_pop)
sample_stats(sample_pop$mean)
x<- sample_stats(sample_pop)
x$mean
View(result.frame)
result.frame = as.data.frame(matrix(ncol=2, nrow=20))
names(result.frame) = c("ID", "Value")
for (i in 11:20){
value = 2*i
result.frame[i,] = c(i, value)
}
View(result.frame)
for (i in 11:20){
value = 2*i
result.frame[i,] = c(i, value)
}
View(result.frame)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
y<- sample_stats(sample_pop)
iteration = i
mean = y$mean
stdev = y$stdev
df_results[i,] = c(i, iteration)
df_results[i,] = c(i, mean)
df_results[i,] = c(i, stdev)
}
View(df_results)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
y<- sample_stats(sample_pop)
df_results$iteration[i] <- i
df_results$mean[i] <- y$mean
df_results$stdev[i]<-y$stdev
}
View(df_results)
x<- sample_stats(sample_pop)
x
x <- c(y)
x
x <- append(u)
append(x, u)
append(x, "u")
y <- 2
append(y, "u")
typeof(l2)
sample_stats <-function(data) {
mean <- mean(data)
stdev <- sd(data)
l2 <- list(mean=mean, stdev=stdev)
return(l2)
}
sample_stats(sample_pop)
x<-sample_stats(sample_pop)
typeof(x)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, i)
df_results <- rbind(metrices, df_results)
}
View(df_results)
metrices
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, i=iteration)
df_results <- rbind(metrices, df_results)
}
View(df_results)
metrices
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_results <- rbind(metrices, df_results)
}
View(df_results)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_total <- rbind(metrices, df_results)
}
View(df_total)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_results <- rbind(metrices, df_results)
}
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_results <-data.frame(metrices)
df_total <- rbind(df_total, df_results)
}
View(df_total)
sample_stats <-function(data) {
mean <- mean(data)
stdev <- sd(data)
l2 <- list(mean=mean, stdev=stdev)
return(l2)
}
x<-sample_stats(sample_pop)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_results <-data.frame(metrices)
df_total <- rbind(df_total, df_results)
}
View(df_total)
View(df_results)
#question1
set.seed(1)
#question2
pop_truth <- rexp(10000, rate = 2)
typeof(pop_truth)
#question3
mean_pop_truth <- round(mean(pop_truth), 3)
#question4
sample_pop <- sample(pop_truth, 5000)
sample_stats <-function(data) {
mean <- mean(data)
stdev <- sd(data)
l2 <- list(mean=mean, stdev=stdev)
return(l2)
}
x<-sample_stats(sample_pop)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_results <-data.frame(metrices)
df_total <- rbind(df_total, df_results)
}
View(df_total)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_answer <-data.frame(metrices)
df_results <- rbind(df_results, df_answer)
}
View(df_results)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_answer <-data.frame(metrices)
df_results <- rbind(df_results, df_answer)
}
View(df_answer)
sample_stats <-function(data) {
mean <- mean(data)
stdev <- sd(data)
l2 <- list(mean=mean, stdev=stdev)
return(l2)
}
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_total <-data.frame(metrices)
df_results <- rbind(df_results, df_total)
}
View(df_results)
View(df_total)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_results <-data.frame(metrices)
df_total <- rbind(df_total, df_results)
}
View(df_total)
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_results <-data.frame(metrices)
df_total <- rbind(df_total, df_results)
print(paste("Currently on iteration") + i)
}
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_results <-data.frame(metrices)
df_total <- rbind(df_total, df_results)
print(paste("Currently on iteration") + iteration)
}
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_results <-data.frame(metrices)
df_total <- rbind(df_total, df_results)
print(paste("Currently on iteration" , i)
}
for (i in 1:26){
df_results <- data.frame("mean" = numeric(), "stdev" = numeric(), "iteration" = numeric())
sample_pop = sample(pop_truth, 500)
metrices<- sample_stats(sample_pop)
metrices <- c(metrices, iteration=i)
df_results <-data.frame(metrices)
df_total <- rbind(df_total, df_results)
print(paste("Currently on iteration" , i))
}
View(df_total)
